// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Parameters container struct for `unbanChatMember` method
    struct UnbanChatMemberParams: JSONEncodable {

        /// Unique identifier for the target group or username of the target supergroup or channel (in the format @username)
        var chatId: ChatId

        /// Unique identifier of the target user
        var userId: Int64

        /// Custom keys for coding/decoding `UnbanChatMemberParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case userId = "user_id"
        }

        public init(chatId: ChatId, userId: Int64) {
            self.chatId = chatId
            self.userId = userId
        }
    }

    /**
     Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns True on success.

     SeeAlso Telegram Bot API Reference:
     [UnbanChatMemberParams](https://core.telegram.org/bots/api#unbanchatmember)

     - Parameters:
         - params: Parameters container, see `UnbanChatMemberParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Bool` type
     */
    @discardableResult
    func unbanChatMember(params: UnbanChatMemberParams) throws -> Future<Bool> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Bool>>
        response = try client.respond(endpoint: "unbanChatMember", body: body, headers: headers)
        return response.flatMap(to: Bool.self) { try self.wrap($0) }
    }
}
