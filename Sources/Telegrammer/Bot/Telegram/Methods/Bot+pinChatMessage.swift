// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Parameters container struct for `pinChatMessage` method
    struct PinChatMessageParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Identifier of a message to pin
        var messageId: Int

        /// Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels.
        var disableNotification: Bool?

        /// Custom keys for coding/decoding `PinChatMessageParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case messageId = "message_id"
            case disableNotification = "disable_notification"
        }

        public init(chatId: ChatId, messageId: Int, disableNotification: Bool? = nil) {
            self.chatId = chatId
            self.messageId = messageId
            self.disableNotification = disableNotification
        }
    }

    /**
     Use this method to pin a message in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.

     SeeAlso Telegram Bot API Reference:
     [PinChatMessageParams](https://core.telegram.org/bots/api#pinchatmessage)

     - Parameters:
         - params: Parameters container, see `PinChatMessageParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Bool` type
     */
    @discardableResult
    func pinChatMessage(params: PinChatMessageParams) throws -> Future<Bool> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Bool>>
        response = try client.respond(endpoint: "pinChatMessage", body: body, headers: headers)
        return response.flatMap(to: Bool.self) { try self.wrap($0) }
    }
}
