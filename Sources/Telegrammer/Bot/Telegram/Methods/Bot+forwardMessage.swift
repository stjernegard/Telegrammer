// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Parameters container struct for `forwardMessage` method
    struct ForwardMessageParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
        var fromChatId: ChatId

        /// Sends the message silently. Users will receive a notification with no sound.
        var disableNotification: Bool?

        /// Message identifier in the chat specified in from_chat_id
        var messageId: Int

        /// Custom keys for coding/decoding `ForwardMessageParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case fromChatId = "from_chat_id"
            case disableNotification = "disable_notification"
            case messageId = "message_id"
        }

        public init(chatId: ChatId, fromChatId: ChatId, disableNotification: Bool? = nil, messageId: Int) {
            self.chatId = chatId
            self.fromChatId = fromChatId
            self.disableNotification = disableNotification
            self.messageId = messageId
        }
    }

    /**
     Use this method to forward messages of any kind. On success, the sent Message is returned.

     SeeAlso Telegram Bot API Reference:
     [ForwardMessageParams](https://core.telegram.org/bots/api#forwardmessage)

     - Parameters:
         - params: Parameters container, see `ForwardMessageParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Message` type
     */
    @discardableResult
    func forwardMessage(params: ForwardMessageParams) throws -> Future<Message> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Message>>
        response = try client.respond(endpoint: "forwardMessage", body: body, headers: headers)
        return response.flatMap(to: Message.self) { try self.wrap($0) }
    }
}
