// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.


import HTTP

public extension Bot {

    /// Parameters container struct for `deleteMessage` method
    struct DeleteMessageParams: JSONEncodable {

        /// Unique identifier for the target chat or username of the target channel (in the format @channelusername)
        var chatId: ChatId

        /// Identifier of the message to delete
        var messageId: Int

        /// Custom keys for coding/decoding `DeleteMessageParams` struct
        enum CodingKeys: String, CodingKey {
            case chatId = "chat_id"
            case messageId = "message_id"
        }

        public init(chatId: ChatId, messageId: Int) {
            self.chatId = chatId
            self.messageId = messageId
        }
    }

    /**
     Use this method to delete a message, including service messages, with the following limitations:
     - A message can only be deleted if it was sent less than 48 hours ago.
     - Bots can delete outgoing messages in private chats, groups, and supergroups.
     - Bots granted can_post_messages permissions can delete outgoing messages in channels.
     - If the bot is an administrator of a group, it can delete any message there.
     - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.
     Returns True on success.

     SeeAlso Telegram Bot API Reference:
     [DeleteMessageParams](https://core.telegram.org/bots/api#deletemessage)

     - Parameters:
         - params: Parameters container, see `DeleteMessageParams` struct
     - Throws: Throws on errors
     - Returns: Future of `Bool` type
     */
    @discardableResult
    func deleteMessage(params: DeleteMessageParams) throws -> Future<Bool> {
        let body = try httpBody(for: params)
        let headers = httpHeaders(for: params)
        let response: Future<TelegramContainer<Bool>>
        response = try client.respond(endpoint: "deleteMessage", body: body, headers: headers)
        return response.flatMap(to: Bool.self) { try self.wrap($0) }
    }
}
